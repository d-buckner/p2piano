name: Test Coverage

on:
  pull_request:
    paths:
      - 'client/**'
      - 'service/**'
      - '.github/workflows/test-coverage.yml'
  push:
    branches:
      - main
    paths:
      - 'client/**'
      - 'service/**'

jobs:
  test-coverage:
    runs-on: ubuntu-latest
    name: Test Coverage
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install client dependencies
        working-directory: client
        run: npm ci

      - name: Install service dependencies
        working-directory: service
        run: npm ci

      - name: Run client tests with coverage
        working-directory: client
        run: npm run test:ci

      - name: Run service tests with coverage
        working-directory: service
        run: npm run test:ci

      - name: Upload coverage artifacts
        if: github.event_name == 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            client/coverage/
            service/coverage/

      - name: Update coverage thresholds on main
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          cd client && npm run coverage:update
          cd ../service && npm run coverage:update
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add client/coverage.thresholds.json service/coverage.thresholds.json
          git diff --staged --quiet || git commit -m "chore: update coverage thresholds [skip ci]"
          git push

      - name: Generate consolidated coverage report
        if: github.event_name == 'pull_request'
        run: |
          echo "## 📊 Coverage Report" > coverage-report.md
          echo "" >> coverage-report.md
          
          # Client coverage summary
          echo "### 🖥️ Client Coverage" >> coverage-report.md
          if [ -f "client/coverage/coverage-summary.json" ]; then
            CLIENT_LINES=$(jq -r '.total.lines.pct' client/coverage/coverage-summary.json)
            CLIENT_FUNCTIONS=$(jq -r '.total.functions.pct' client/coverage/coverage-summary.json)
            CLIENT_BRANCHES=$(jq -r '.total.branches.pct' client/coverage/coverage-summary.json)
            CLIENT_STATEMENTS=$(jq -r '.total.statements.pct' client/coverage/coverage-summary.json)
            
            echo "**Overall:** ${CLIENT_LINES}% lines, ${CLIENT_FUNCTIONS}% functions, ${CLIENT_BRANCHES}% branches, ${CLIENT_STATEMENTS}% statements" >> coverage-report.md
            echo "" >> coverage-report.md
            
            echo "<details>" >> coverage-report.md
            echo "<summary>📁 File Coverage Details</summary>" >> coverage-report.md
            echo "" >> coverage-report.md
            echo "| File | Lines | Functions | Branches | Statements |" >> coverage-report.md
            echo "|------|-------|-----------|----------|------------|" >> coverage-report.md
            
            # Parse each file from coverage-summary.json
            jq -r 'to_entries[] | select(.key != "total") | "\(.key)|\(.value.lines.pct)|\(.value.functions.pct)|\(.value.branches.pct)|\(.value.statements.pct)"' client/coverage/coverage-summary.json | while IFS='|' read -r file lines functions branches statements; do
              # Clean up file path
              clean_file=$(echo "$file" | sed 's|^.*/src/|src/|')
              echo "| \`${clean_file}\` | ${lines}% | ${functions}% | ${branches}% | ${statements}% |" >> coverage-report.md
            done
            
            echo "" >> coverage-report.md
            echo "</details>" >> coverage-report.md
          else
            echo "Coverage data not found" >> coverage-report.md
          fi
          
          echo "" >> coverage-report.md
          
          # Service coverage summary
          echo "### ⚙️ Service Coverage" >> coverage-report.md
          if [ -f "service/coverage/coverage-summary.json" ]; then
            SERVICE_LINES=$(jq -r '.total.lines.pct' service/coverage/coverage-summary.json)
            SERVICE_FUNCTIONS=$(jq -r '.total.functions.pct' service/coverage/coverage-summary.json)
            SERVICE_BRANCHES=$(jq -r '.total.branches.pct' service/coverage/coverage-summary.json)
            SERVICE_STATEMENTS=$(jq -r '.total.statements.pct' service/coverage/coverage-summary.json)
            
            echo "**Overall:** ${SERVICE_LINES}% lines, ${SERVICE_FUNCTIONS}% functions, ${SERVICE_BRANCHES}% branches, ${SERVICE_STATEMENTS}% statements" >> coverage-report.md
            echo "" >> coverage-report.md
            
            echo "<details>" >> coverage-report.md
            echo "<summary>📁 File Coverage Details</summary>" >> coverage-report.md
            echo "" >> coverage-report.md
            echo "| File | Lines | Functions | Branches | Statements |" >> coverage-report.md
            echo "|------|-------|-----------|----------|------------|" >> coverage-report.md
            
            # Parse each file from coverage-summary.json
            jq -r 'to_entries[] | select(.key != "total") | "\(.key)|\(.value.lines.pct)|\(.value.functions.pct)|\(.value.branches.pct)|\(.value.statements.pct)"' service/coverage/coverage-summary.json | while IFS='|' read -r file lines functions branches statements; do
              # Clean up file path
              clean_file=$(echo "$file" | sed 's|^.*/src/|src/|')
              echo "| \`${clean_file}\` | ${lines}% | ${functions}% | ${branches}% | ${statements}% |" >> coverage-report.md
            done
            
            echo "" >> coverage-report.md
            echo "</details>" >> coverage-report.md
          else
            echo "Coverage data not found" >> coverage-report.md
          fi
          
          echo "" >> coverage-report.md
          echo "📋 **Detailed Reports:** [Download Coverage Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> coverage-report.md
          echo "" >> coverage-report.md

      - name: Comment consolidated coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = fs.readFileSync('coverage-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverage
            });